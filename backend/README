# Aarogya Sahayak Backend

Complete Flask backend for rural healthcare management system with AI-powered health predictions, WhatsApp/SMS integration, and emergency response system.

## Features

### 🔐 Core Features
- User authentication with JWT tokens
- Role-based access control (Patient, ASHA, Admin)
- Profile management with photo uploads
- Multi-language support (Hindi, English, Bengali, Telugu, Tamil)

### 🏥 Health Management
- Health records tracking (vitals, symptoms)
- AI-powered health risk prediction
- Appointment booking system
- Dashboard with analytics

### 🚨 Emergency Response
- Real-time emergency alert system
- GPS location-based emergency dispatch
- Automatic notifications to ASHA workers
- Emergency contact notifications

### 📱 Communication
- WhatsApp Business API integration
- SMS notifications and alerts
- Bulk messaging for health campaigns
- OTP verification system

### 🤖 AI Features
- Health risk prediction engine
- Personalized health recommendations
- Early warning system
- Population health analytics

## Quick Start

### Prerequisites
- Python 3.8+
- PostgreSQL (optional, SQLite by default)
- Redis (optional)

### Installation

1. **Clone the repository**
   ```bash
   cd aarogya-sahayak-backend
   ```

2. **Create virtual environment**
   ```bash
   python -m venv venv
   source venv/bin/activate  # On Windows: venv\Scripts\activate
   ```

3. **Install dependencies**
   ```bash
   pip install -r requirements.txt
   ```

4. **Setup environment variables**
   ```bash
   cp .env.template .env
   # Edit .env with your configuration
   ```

5. **Initialize database**
   ```bash
   flask db init
   flask db migrate -m "Initial migration"
   flask db upgrade
   ```

6. **Run the application**
   ```bash
   python app.py
   ```

The server will start on `http://localhost:5000`

### Docker Setup (Alternative)

```bash
docker-compose up --build
```

## API Endpoints

### Authentication
- `POST /api/auth/register` - User registration
- `POST /api/auth/login` - User login
- `GET /api/auth/profile` - Get user profile
- `POST /api/auth/upload-photo` - Upload profile photo
- `POST /api/auth/verify-phone` - Send OTP
- `POST /api/auth/verify-otp` - Verify OTP

### Health Records
- `POST /api/health/records` - Create health record
- `GET /api/health/records` - Get health records
- `POST /api/health/appointments` - Book appointment
- `GET /api/health/dashboard/stats` - Health statistics

### Emergency System
- `POST /api/emergency/alert` - Create emergency alert
- `GET /api/emergency/alerts` - Get emergency alerts

### Communication
- `POST /api/communication/whatsapp/send` - Send WhatsApp message
- `POST /api/communication/sms/send` - Send SMS
- `POST /api/communication/broadcast` - Broadcast message

### Admin Dashboard
- `GET /api/admin/dashboard/stats` - Admin statistics
- `GET /api/admin/users` - User management

## Configuration

### Environment Variables

```env
# Flask Configuration
SECRET_KEY=your-secret-key
JWT_SECRET_KEY=your-jwt-secret

# Database
DATABASE_URL=sqlite:///aarogya_sahayak.db

# WhatsApp API (Optional)
WHATSAPP_ACCESS_TOKEN=your-token
WHATSAPP_PHONE_ID=your-phone-id

# Twilio SMS (Optional)
TWILIO_ACCOUNT_SID=your-sid
TWILIO_AUTH_TOKEN=your-token
TWILIO_PHONE_NUMBER=your-number
```

## Testing

```bash
# Run tests
pytest

# Test specific module
pytest tests/test_auth.py
```

## Deployment

### Production Setup
1. Use PostgreSQL instead of SQLite
2. Set up Redis for caching
3. Configure WhatsApp Business API
4. Set up Twilio for SMS
5. Use environment variables for all secrets
6. Set up monitoring and logging

### Docker Production
```bash
docker-compose -f docker-compose.prod.yml up -d
```

## Project Structure

```
aarogya-sahayak-backend/
├── app.py                  # Main application
├── config.py               # Configuration
├── requirements.txt        # Dependencies
├── models/                 # Database models
│   ├── user.py
│   ├── health.py
│   ├── emergency.py
│   └── ...
├── routes/                 # API routes
│   ├── auth.py
│   ├── health.py
│   ├── emergency.py
│   └── ...
├── services/               # Business logic
│   ├── whatsapp_service.py
│   ├── sms_service.py
│   └── ai_prediction.py
├── uploads/               # User uploads
├── tests/                 # Test files
└── migrations/           # Database migrations
```

## Contributing

1. Fork the repository
2. Create a feature branch
3. Make your changes
4. Add tests
5. Submit a pull request

## License

This project is licensed under the MIT License.

## Support

For support and questions, please contact the development team.
