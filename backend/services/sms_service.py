from flask import current_app
import logging

class SMSService:
    """SMS service for health communications using Twilio"""

    def __init__(self):
        self.client = None
        self.phone_number = None

    def init_app(self, app):
        try:
            from twilio.rest import Client
            account_sid = app.config.get('TWILIO_ACCOUNT_SID')
            auth_token = app.config.get('TWILIO_AUTH_TOKEN')
            self.phone_number = app.config.get('TWILIO_PHONE_NUMBER')

            if account_sid and auth_token:
                self.client = Client(account_sid, auth_token)
        except ImportError:
            print("Twilio not installed - SMS functionality disabled")

    def send_sms(self, phone_number, message):
        """Send SMS message"""
        try:
            if not self.client:
                print("Twilio SMS not configured - simulating SMS send")
                print(f"SMS to {phone_number}: {message}")
                return True

            # Format phone number for Indian numbers
            if not phone_number.startswith('+'):
                if phone_number.startswith('91'):
                    phone_number = '+' + phone_number
                else:
                    phone_number = '+91' + phone_number

            message_instance = self.client.messages.create(
                body=message,
                from_=self.phone_number,
                to=phone_number
            )

            print(f"SMS sent to {phone_number}: {message_instance.sid}")
            return True

        except Exception as e:
            print(f"SMS send error: {e}")
            return False

    def send_otp(self, phone_number, otp):
        """Send OTP via SMS"""
        message = f"‡§Ü‡§∞‡•ã‡§ó‡•ç‡§Ø ‡§∏‡§π‡§æ‡§Ø‡§ï: ‡§Ü‡§™‡§ï‡§æ OTP {otp} ‡§π‡•à‡•§ ‡§Ø‡§π 5 ‡§Æ‡§ø‡§®‡§ü ‡§Æ‡•á‡§Ç ‡§∏‡§Æ‡§æ‡§™‡•ç‡§§ ‡§π‡•ã ‡§ú‡§æ‡§è‡§ó‡§æ‡•§ ‡§á‡§∏‡•á ‡§ï‡§ø‡§∏‡•Ä ‡§ï‡•á ‡§∏‡§æ‡§• ‡§∏‡§æ‡§ù‡§æ ‡§® ‡§ï‡§∞‡•á‡§Ç‡•§"
        return self.send_sms(phone_number, message)

    def send_health_alert(self, phone_number, patient_name, alert_type):
        """Send health alert SMS"""
        try:
            alert_messages = {
                'emergency': f"üö® ‡§Ü‡§™‡§æ‡§§‡§ï‡§æ‡§≤: {patient_name} ‡§ï‡•ã ‡§§‡§§‡•ç‡§ï‡§æ‡§≤ ‡§ö‡§ø‡§ï‡§ø‡§§‡•ç‡§∏‡§æ ‡§∏‡§π‡§æ‡§Ø‡§§‡§æ ‡§ö‡§æ‡§π‡§ø‡§è‡•§ ‡§§‡•Å‡§∞‡§Ç‡§§ ‡§∏‡§Ç‡§™‡§∞‡•ç‡§ï ‡§ï‡§∞‡•á‡§Ç‡•§",
                'high_risk': f"‚ö†Ô∏è ‡§ö‡•á‡§§‡§æ‡§µ‡§®‡•Ä: {patient_name} ‡§ï‡§æ ‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø ‡§ú‡•ã‡§ñ‡§ø‡§Æ ‡§Ö‡§ß‡§ø‡§ï ‡§π‡•à‡•§ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§§‡•Å‡§∞‡§Ç‡§§ ‡§ú‡§æ‡§Ç‡§ö ‡§ï‡§∞‡§æ‡§è‡§Ç‡•§",
                'medication': f"üíä ‡§Ø‡§æ‡§¶‡§¶‡§æ‡§∂‡•ç‡§§: {patient_name}, ‡§Ø‡§π ‡§Ü‡§™‡§ï‡•Ä ‡§¶‡§µ‡§æ ‡§ï‡§æ ‡§∏‡§Æ‡§Ø ‡§π‡•à‡•§",
                'appointment': f"üìÖ ‡§Ö‡§™‡•â‡§á‡§Ç‡§ü‡§Æ‡•á‡§Ç‡§ü: {patient_name}, ‡§Ü‡§™‡§ï‡•Ä ‡§ï‡§≤ ‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø ‡§ú‡§æ‡§Ç‡§ö ‡§π‡•à‡•§"
            }

            message = alert_messages.get(alert_type, f"‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø ‡§Ö‡§™‡§°‡•á‡§ü: {patient_name}, ‡§Ö‡§™‡§®‡•á ‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø ‡§ï‡§æ ‡§ñ‡•ç‡§Ø‡§æ‡§≤ ‡§∞‡§ñ‡•á‡§Ç‡•§")
            return self.send_sms(phone_number, message)

        except Exception as e:
            print(f"Health alert SMS error: {e}")
            return False

    def send_bulk_sms(self, recipients, message):
        """Send bulk SMS messages"""
        results = []
        for phone in recipients:
            try:
                result = self.send_sms(phone, message)
                results.append({'phone': phone, 'success': result})
            except Exception as e:
                results.append({'phone': phone, 'success': False, 'error': str(e)})

        return results
