import requests
import json
from flask import current_app

class WhatsAppService:
    """WhatsApp Business API integration for health communications"""

    def __init__(self):
        self.api_url = None
        self.access_token = None
        self.phone_id = None

    def init_app(self, app):
        self.api_url = app.config.get('WHATSAPP_API_URL')
        self.access_token = app.config.get('WHATSAPP_ACCESS_TOKEN')
        self.phone_id = app.config.get('WHATSAPP_PHONE_ID')

    def send_message(self, phone_number, message, message_type='text'):
        """Send WhatsApp message"""
        try:
            if not all([self.api_url, self.access_token, self.phone_id]):
                print("WhatsApp API not configured - simulating message")
                print(f"WhatsApp to {phone_number}: {message}")
                return True

            # Format phone number (remove + and country code handling)
            if phone_number.startswith('+'):
                phone_number = phone_number[1:]
            if not phone_number.startswith('91'):
                phone_number = '91' + phone_number

            headers = {
                'Authorization': f'Bearer {self.access_token}',
                'Content-Type': 'application/json'
            }

            data = {
                'messaging_product': 'whatsapp',
                'to': phone_number,
                'type': message_type,
                'text': {
                    'body': message
                }
            }

            response = requests.post(
                f"{self.api_url}/{self.phone_id}/messages",
                headers=headers,
                json=data,
                timeout=10
            )

            if response.status_code == 200:
                print(f"WhatsApp message sent to {phone_number}")
                return True
            else:
                print(f"WhatsApp API error: {response.status_code} - {response.text}")
                return False

        except Exception as e:
            print(f"WhatsApp send error: {e}")
            return False

    def send_health_alert(self, phone_number, patient_name, alert_type, severity):
        """Send health-specific alert messages"""
        try:
            alert_messages = {
                'high_bp': f"ЁЯЪи {patient_name}, рдЖрдкрдХрд╛ рд░рдХреНрддрдЪрд╛рдк рдмрд╣реБрдд рдЕрдзрд┐рдХ рд╣реИ ({severity})ред рдХреГрдкрдпрд╛ рддреБрд░рдВрдд рдЖрд░рд╛рдо рдХрд░реЗрдВ рдФрд░ ASHA рдХрд╛рд░реНрдпрдХрд░реНрддрд╛ рд╕реЗ рд╕рдВрдкрд░реНрдХ рдХрд░реЗрдВред",
                'high_temperature': f"ЁЯМбя╕П {patient_name}, рдЖрдкрдХрд╛ рдмреБрдЦрд╛рд░ рдЦрддрд░рдирд╛рдХ рд╕реНрддрд░ рдкрд░ рд╣реИред рддреБрд░рдВрдд рдЪрд┐рдХрд┐рддреНрд╕рд╛ рд╕рд╣рд╛рдпрддрд╛ рд▓реЗрдВред",
                'low_oxygen': f"тЪая╕П {patient_name}, рдСрдХреНрд╕реАрдЬрди рдХрд╛ рд╕реНрддрд░ рдХрдо рд╣реИред рдЧрд╣рд░реА рд╕рд╛рдВрд╕ рд▓реЗрдВ рдФрд░ рддреБрд░рдВрдд рдбреЙрдХреНрдЯрд░ рд╕реЗ рдорд┐рд▓реЗрдВред",
                'emergency': f"ЁЯЪи рдЖрдкрд╛рддрдХрд╛рд▓: {patient_name} рдХреЛ рддрддреНрдХрд╛рд▓ рдЪрд┐рдХрд┐рддреНрд╕рд╛ рд╕рд╣рд╛рдпрддрд╛ рдХреА рдЖрд╡рд╢реНрдпрдХрддрд╛ рд╣реИред",
                'medication_reminder': f"ЁЯТК {patient_name}, рдпрд╣ рдЖрдкрдХреА рджрд╡рд╛ рдХрд╛ рд╕рдордп рд╣реИред рдХреГрдкрдпрд╛ рдЕрдкрдиреА рджрд╡рд╛ рд▓реЗрдВред",
                'appointment_reminder': f"ЁЯУЕ {patient_name}, рдЖрдкрдХреА рдХрд▓ рдЕрдкреЙрдЗрдВрдЯрдореЗрдВрдЯ рд╣реИред рдХреГрдкрдпрд╛ рд╕рдордп рдкрд░ рдкрд╣реБрдВрдЪреЗрдВред"
            }

            message = alert_messages.get(alert_type, f"рд╕реНрд╡рд╛рд╕реНрдереНрдп рдЕрд▓рд░реНрдЯ: {patient_name}, рдХреГрдкрдпрд╛ рдЕрдкрдиреЗ рд╕реНрд╡рд╛рд╕реНрдереНрдп рдкрд░ рдзреНрдпрд╛рди рджреЗрдВред")
            return self.send_message(phone_number, message)

        except Exception as e:
            print(f"Health alert error: {e}")
            return False

    def send_bulk_message(self, phone_numbers, message):
        """Send bulk messages (for community health campaigns)"""
        results = []
        for phone in phone_numbers:
            try:
                result = self.send_message(phone, message)
                results.append({'phone': phone, 'success': result})
                # Rate limiting
                import time
                time.sleep(0.1)
            except Exception as e:
                results.append({'phone': phone, 'success': False, 'error': str(e)})

        return results
